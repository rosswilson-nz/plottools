% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_ci.R
\name{geom_ci}
\alias{geom_ci}
\alias{stat_ci}
\title{Graded error bars}
\usage{
stat_ci(
  mapping = NULL,
  data = NULL,
  conf.levels = c(0.5, 0.8, 0.9, 0.95, 0.99),
  widths = c(1.5, 1.3, 1, 0.5, 0.2),
  geom = GeomCI,
  position = "identity",
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

geom_ci(
  mapping = NULL,
  data = NULL,
  conf.levels = c(0.5, 0.8, 0.9, 0.95, 0.99),
  widths = c(2, 1.5, 1, 0.5, 0.2),
  stat = StatCI,
  position = "identity",
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{ggplot2::aes()}}. If
specified and \code{inherit.aes = TRUE} (the default), it is combined with the
default mapping at the top level of the plot. You must supply mapping if
there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three options:

\if{html}{\out{<div class="sourceCode">}}\preformatted{If NULL, the default, the data is inherited from the plot data as
specified in the call to [ggplot2::ggplot()].

A data.frame, or other object, will override the plot data. All objects
will be fortified to produce a data frame. See [ggplot2::fortify()] for
which variables will be created.

A function will be called with a single argument, the plot data. The
return value must be a data.frame, and will be used as the layer data. A
function can be created from a formula (e.g. `~ head(.x, 10)`).
}\if{html}{\out{</div>}}}

\item{conf.levels}{The confidence interval bands to display, from narrowest
to widest. These are specified on the 0--1 scale (e.g. 0.5 for 50\% CI).}

\item{widths}{Corresponding widths of the range bars. Must be a vector of the
same length as \code{conf.levels}.}

\item{geom}{The geometric object to use to display the data for this layer.
When using a \verb{stat_*()} function to construct a layer, the \code{geom}
argument can be used to override the default coupling between stats and
geoms. The \code{geom} argument accepts the following:
* A \code{Geom} ggproto subclass, for example \code{GeomPoint}.
* A string naming the geom. To give the geom as a string, strip the
function name of the \code{geom_} prefix. For example, to use \code{geom_point()},
give the geom as \code{"point"}.
* For more information and other ways to specify the geom, see the
\link[ggplot2:layer_geoms]{layer geom} documentation.}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
* The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
* A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
* For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display. To include legend keys for all levels, even when no data exists,
use \code{TRUE}.  If \code{NA}, all levels are shown in legend, but unobserved
levels are omitted.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics, rather than
combining with them. This is most useful for helper functions that define
both data and aesthetics and shouldn't inherit behaviour from the default
plot specification.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{ggplot2::layer()}}'s \code{params}
argument.}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used to override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
* A \code{Stat} ggproto subclass, for example \code{StatCount}.
* A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use
\code{stat_count()}, give the stat as \code{"count"}.
* For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.}
}
\description{
Plot graded error bars defined by \code{x}, \code{y}, and \code{se}. This draws a set of
overlapping line ranges, at different confidence interval widths.
}
